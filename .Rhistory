View(testmm)
library(swirl)
swirl()
x[c(3, 5, 7)]
x[c(0)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo=11, bar=2, norf=NA)
print(vect)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
vect == vect2
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
play()
my_vector
nxt()
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?"matrix"
?matrix
my_matrix2 <- matrix(c(1:20), nrow= 4, ncol=5)
identical(my_matrix2, my_matrix)
my_matrix$patients <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
play()
cbind(my_matrix, patients)
nxt()
my data <- data.frame(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
addition <- function(x, y) {
x + y
}
addition(4, 2)
above10(2)
above10(2)
above10(12)
aboveten(12)
abovetwn(6)
aboveten(5)
aboveten <- function(x) {
numbers <- x > 10
x[numbers]
}
aboveten(12)
aboveten(2)
abovetest <- function(x) {
x > 10
}
abovetest(2)
abovetest(14)
aboveten(4O)
aboveten(3)
aboveten(40)
above <- function(x, n) {
numbers <- x > 10
x[numbers]
}
above(3)
above(30)
above(3, 19)
above(c(6, 31, 12))
x <- 1:12
above(x)
x <- 9, 10, 11, 12, 13
x <- 9:13
above(x)
x <- c(4, 5, 9, 14, 15)
above(x)
above(x)
above <- function(x, n) {
numbers <- x > n
x[numbers]
}
above(x)
n <- 15
above(x)
x <- 10: 15
above(x)
above(x, 15)
x <- 1:20
above(x, 15)
above(x)
above <- function(x, a) {
numbers <- x > a
x[numbers]
}
above(x)
above(x, 31)
above(6)
above <- function(x, a = 5) {
numbers <- x > a
x[numbers]
}
above(6)
above(234521)
above(3)
above(6)
above(0)
w <- data.frame(2:9, 2,)
w <- data.frame(2:9, 2,3)
print (w)
w <- data.frame(2:3, 2,3)
print(w)
w <- data.frame(2:3, c(1:6))
print(w)
w <- data.frame(2:3)
print(w)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x * y
}
f(3)
columnmean <- function(w) { #find mean of each column
numcolumn <- ncol(y)
means <- numeric(numcolumn)
for(i in 1:numcolumn) {
means[i] <- mean(w[,i])
}
means(airquality)       #i got lost here
}
columnmean(airquality)
as.Date(x)
as.Date(2015)
as.Date(2015-12-01)
as.Date("2015-12-01)
sdf
exit
x <- 0
bye()
exit()
0
{}
as.Date("2015-12-01")
x <- Sys.time()
x
x <- month()
g <- as.POSIXct.date()
g
g <- as.POSIXct.date()
g <- as.POSIXct.date(x)
p <- as.POSIXlt(x)
x <- Sys.time()
x
p <- as.POSIXlt(x)
names(unclass(p))
p$mtoff
p$gmtoff
p$zone
p$yday
p$wday
p$sec
x <- Sys.time()
x
unclass(x)
j <- as.POSIXlt()
j <- as.POSIXlt(x)
j$sec
demo()
library()
search()
nchar("Today is Saturday!")
guestchart <- matrix(1:12, nrow = 4, ncol = 3)
guestchart
cube <- function(x, n) {
x^3
}
cube(3)
cube(3, 2)
> cube <- function(x) {
+     x^3
+ }
> cube <- function(x, n) {
x^3
}
cube <- function(x, n) {
x^3
}
cube(1)
cube(2, 4)
cube <- function(x, f) {
x^3
}
cube(9)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
g(y) = y + z
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
print(y)
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
print(x)
print(x)
print(y)
print(g)
> head(flags)
name landmass zone area population language religion bars stripes colours
1    Afghanistan        5    1  648         16       10        2    0       3       5
2        Albania        3    1   29          3        6        6    0       0       3
3        Algeria        4    1 2388         20        8        2    2       0       3
4 American-Samoa        6    3    0          0        1        1    0       0       5
5        Andorra        3    1    0          0        6        0    3       0       3
6         Angola        4    2 1247          7       10        5    0       2       3
red green blue gold white black orange mainhue circles crosses saltires quarters
1   1     1    0    1     1     1      0   green       0       0        0        0
2   1     0    0    1     0     1      0     red       0       0        0        0
3   1     1    0    0     1     0      0   green       0       0        0        0
4   1     0    1    1     1     0      1    blue       0       0        0        0
5   1     0    1    1     0     0      0    gold       0       0        0        0
6   1     0    0    1     0     1      0     red       0       0        0        0
sunstars crescent triangle icon animate text topleft botright
1        1        0        0    1       0    0   black    green
2        1        0        0    0       1    0     red      red
3        1        1        0    0       0    0   green    white
4        0        0        1    1       1    0    blue      red
5        0        0        0    0       0    0    blue      red
6        1        0        0    1       0    0     red    black
TRUE && 62 < 62 && 44 >= 44
TRUE && FALSE
99.99 > 100 || 45 < 7.3 || 4 != 4.0
TRUE || FALSE
4 != 4.0
FALSE || TRUE && FALSE
TRUE && FALSE
9 >= 4 && 3 < 6
TRUE && 6 != 4
FALSE || TRUE
5 == 5.0
FALSE && 6 >= 6
all(c(TRUE, FALSE, TRUE))
x <- list(a = 1:5, b = rnorm(10))
x
mean(x$b)
mean(x$a)
x$b
c = rnorm(20, 1)
c
c = rnorm(20)
c
c = rnorm(5)
c
c = rnorm(5, 1)
c
c = rnorm(5, sd = 1)
c
class(c)
printmessage <- function(x) {
if(x > 0)
print("x greater than zero")
else
print("x is or less than zero")
}
printmessage(x)
printmessage(4)
printmessage(-3)
printmessage <- function(x) {
if(x > 0)
print("x greater than zero")
else
print("x is or less than zero")
invisible(x)
}
printmessage(2)
printmessage(0)
printmessage(-9)
printmessage(5, 4, -2)
printmessage <- function(x) {
if(x > 0)
print("x greater than zero")
else
print("x is or less than zero")
}
printmessage(5, 4, -2)
printmessage(NA)
library(datasets)
data(iris)
head(iris)
tail(iris)
(iris$species)
iris$Species
mean(sepal.Length [iris$Species =="virginica"], na.rm= TRUE)
mean(iris$Sepal.Length[iris$Species == "virginica"], na.rm = TRUE)
mean(iris$Sepal.Length[iris$Species == "virginica"])
colMean(iris)
colMeans(iris)
colMeans("iris")
rowMeans(irsi[, 1:4])
rowMeans(iris[, 1:4])
colMeans(iris[, 1: 4])
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
